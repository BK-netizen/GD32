<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\Project.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\Project.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Mar 05 11:45:12 2025
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; driver_init &rArr; bsp_8080_lcd_init &rArr; bsp_8080_lcd_port_init &rArr; driver_exmc_lcd_init &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC0_1_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC0_1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6d]">ADC2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[b]">AVD_LVD_OVD_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from gd32h7xx_interrupt.o(i.BusFault_Handler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[89]">CAN0_Busoff_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8a]">CAN0_Error_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8b]">CAN0_FastError_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[88]">CAN0_Message_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8d]">CAN0_REC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8c]">CAN0_TEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[87]">CAN0_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[90]">CAN1_Busoff_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[91]">CAN1_Error_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[92]">CAN1_FastError_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8f]">CAN1_Message_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[94]">CAN1_REC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[93]">CAN1_TEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8e]">CAN1_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[97]">CAN2_Busoff_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[98]">CAN2_Error_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[99]">CAN2_FastError_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[96]">CAN2_Message_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9b]">CAN2_REC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9a]">CAN2_TEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[95]">CAN2_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4f]">CAU_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6e]">CMP0_1_IRQHandler</a> from bsp_cmp.o(i.CMP0_1_IRQHandler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6f]">CTC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4e]">DCI_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[15]">DMA0_Channel0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[16]">DMA0_Channel1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[17]">DMA0_Channel2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[18]">DMA0_Channel3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[19]">DMA0_Channel4_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[1a]">DMA0_Channel5_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[1b]">DMA0_Channel6_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[34]">DMA0_Channel7_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[40]">DMA1_Channel3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[41]">DMA1_Channel4_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[44]">DMA1_Channel5_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[45]">DMA1_Channel6_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[46]">DMA1_Channel7_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[60]">DMAMUX_OVR_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9c]">EFUSE_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[42]">ENET0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[43]">ENET0_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[85]">ENET1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[86]">ENET1_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[35]">EXMC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from bsp_key.o(i.EXTI0_IRQHandler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2e]">EXTI10_15_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from bsp_key.o(i.EXTI1_IRQHandler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[1d]">EXTI5_9_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[74]">FAC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[e]">FMC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[51]">FPU_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[50]">HAU_TRNG_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[61]">HPDF_INT0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[62]">HPDF_INT1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[63]">HPDF_INT2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[64]">HPDF_INT3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6c]">HWSEM_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32h7xx_interrupt.o(i.HardFault_Handler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[26]">I2C0_ER_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[25]">I2C0_EV_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9d]">I2C0_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[28]">I2C1_ER_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[27]">I2C1_EV_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9e]">I2C1_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[49]">I2C2_ER_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[48]">I2C2_EV_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9f]">I2C2_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5e]">I2C3_ER_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5d]">I2C3_EV_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a0]">I2C3_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5a]">IPA_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a1]">LPDTS_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a2]">LPDTS_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[69]">MDIO_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6a]">MDMA_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from gd32h7xx_interrupt.o(i.MemManage_Handler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32h7xx_interrupt.o(i.NMI_Handler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5c]">OSPI0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[71]">OSPI1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[70]">RAMECCMU_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[f]">RCU_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5f]">RSPDIF_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2f]">RTC_Alarm_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[d]">RTC_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[72]">RTDEC0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[73]">RTDEC1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[57]">SAI0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5b]">SAI1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[65]">SAI2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[36]">SDIO0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6b]">SDIO1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[29]">SPI0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2a]">SPI1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[54]">SPI3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[55]">SPI4_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[56]">SPI5_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from gd32h7xx_interrupt.o(i.SysTick_Handler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[ae]">SystemInit</a> from system_gd32h7xx.o(i.SystemInit) referenced from startup_gd32h7xx.o(.text)
 <LI><a href="#[c]">TAMPER_STAMP_LXTAL_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[1e]">TIMER0_BRK_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[21]">TIMER0_Channel_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a3]">TIMER0_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[20]">TIMER0_TRG_CMT_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[1f]">TIMER0_UP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[66]">TIMER14_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[67]">TIMER15_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[68]">TIMER16_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a5]">TIMER1_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[22]">TIMER1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a9]">TIMER22_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[76]">TIMER22_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[aa]">TIMER23_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[77]">TIMER23_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a6]">TIMER2_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[23]">TIMER2_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[ab]">TIMER30_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[78]">TIMER30_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[ac]">TIMER31_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[79]">TIMER31_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a7]">TIMER3_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[24]">TIMER3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7a]">TIMER40_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7b]">TIMER41_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7c]">TIMER42_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7d]">TIMER43_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7e]">TIMER44_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a8]">TIMER4_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[37]">TIMER4_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[7f]">TIMER50_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[80]">TIMER51_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3b]">TIMER5_DAC_UDR_IRQHandler</a> from bsp_timer.o(i.TIMER5_DAC_UDR_IRQHandler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3c]">TIMER6_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[30]">TIMER7_BRK_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[33]">TIMER7_Channel_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a4]">TIMER7_DEC_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[32]">TIMER7_TRG_CMT_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[31]">TIMER7_UP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[59]">TLI_ER_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[58]">TLI_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[75]">TMU_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[39]">UART3_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[3a]">UART4_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[52]">UART6_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[53]">UART7_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2b]">USART0_IRQHandler</a> from bsp_uart.o(i.USART0_IRQHandler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2c]">USART1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[2d]">USART2_IRQHandler</a> from bsp_uart.o(i.USART2_IRQHandler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[47]">USART5_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4b]">USBHS0_EP1_IN_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4a]">USBHS0_EP1_OUT_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4d]">USBHS0_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[4c]">USBHS0_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[82]">USBHS1_EP1_IN_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[81]">USBHS1_EP1_OUT_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[84]">USBHS1_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[83]">USBHS1_WKUP_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from gd32h7xx_interrupt.o(i.UsageFault_Handler) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[a]">WWDGT_IRQHandler</a> from startup_gd32h7xx.o(.text) referenced from startup_gd32h7xx.o(RESET)
 <LI><a href="#[af]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32h7xx.o(.text)
 <LI><a href="#[b1]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[b0]">fputc</a> from bsp_uart.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[ad]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[eb]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_tic_inc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[129]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[199]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[19a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f2]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f3]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f4]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f5]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[f6]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[110]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19c]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[f1]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f0]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[f7]"></a>delay_us</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, driver_public.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>

<P><STRONG><a name="[f8]"></a>delay_sysclk</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, driver_public.o(RAM_CODE), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init (via Veneer)
</UL>

<P><STRONG><a name="[f9]"></a>delay_ms</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, driver_public.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = delay_ms &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9488_reginit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9341_reginit
</UL>

<P><STRONG><a name="[fa]"></a>driver_tic_inc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, driver_public.o(RAM_CODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = driver_tic_inc &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_interrupt.o(i.BusFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = BusFault_Handler &rArr; error_reset &rArr; bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CMP0_1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_cmp.o(i.CMP0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMP0_1_IRQHandler &rArr; driver_cmp_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_cmp_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI0_IRQHandler &rArr; dvire_gpio_exti_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvire_gpio_exti_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_key.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI1_IRQHandler &rArr; dvire_gpio_exti_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvire_gpio_exti_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_interrupt.o(i.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = HardFault_Handler &rArr; error_reset &rArr; bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_interrupt.o(i.MemManage_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MemManage_Handler &rArr; error_reset &rArr; bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_interrupt.o(i.NMI_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = NMI_Handler &rArr; error_reset &rArr; bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32h7xx_interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; driver_tic_inc &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_tic_inc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIMER5_DAC_UDR_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_timer.o(i.TIMER5_DAC_UDR_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIMER5_DAC_UDR_IRQHandler &rArr; driver_timer_updata_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_updata_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>USART0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_uart.o(i.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART0_IRQHandler &rArr; driver_uart_int_handler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>USART2_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USART2_IRQHandler &rArr; driver_uart_int_handler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_interrupt.o(i.UsageFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = UsageFault_Handler &rArr; error_reset &rArr; bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[10c]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[19d]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[196]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
</UL>

<P><STRONG><a name="[19e]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[19f]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[10e]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a0]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1a1]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1a2]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[128]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf
</UL>

<P><STRONG><a name="[114]"></a>bsp_8080_lcd_backlight_duty_set</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_backlight_duty_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_8080_lcd_backlight_duty_set &rArr; driver_timer_pwm_duty_set
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_duty_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[116]"></a>bsp_8080_lcd_backlight_on</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_backlight_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_8080_lcd_backlight_on &rArr; driver_timer_pwm_duty_set
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_on
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_duty_set
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[cb]"></a>bsp_8080_lcd_clear</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_8080_lcd_clear &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[119]"></a>bsp_8080_lcd_color_fill</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = bsp_8080_lcd_color_fill &rArr; driver_dma_mem_to_exmclcd_start &rArr; driver_dma_flag_wait_timeout &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_show_log
</UL>

<P><STRONG><a name="[123]"></a>bsp_8080_lcd_display_dir</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_display_dir))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[11c]"></a>bsp_8080_lcd_draw_point</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_cursor
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_show_char
</UL>

<P><STRONG><a name="[11d]"></a>bsp_8080_lcd_fill</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = bsp_8080_lcd_fill &rArr; bsp_8080_lcd_set_window &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_window
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf
</UL>

<P><STRONG><a name="[ca]"></a>bsp_8080_lcd_init</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = bsp_8080_lcd_init &rArr; bsp_8080_lcd_port_init &rArr; driver_exmc_lcd_init &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_set
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9488_reginit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9341_reginit
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_regno
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_scan_dir
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_display_dir
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_clear
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_backlight_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_backlight_duty_set
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_read_data
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_port_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>bsp_8080_lcd_printf</STRONG> (Thumb, 350 bytes, Stack size 152 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_show_char
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_fill
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsprintf
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_reset
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>bsp_8080_lcd_printf_init</STRONG> (Thumb, 78 bytes, Stack size 36 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_printf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_8080_lcd_printf_init &rArr; bsp_8080_lcd_fill &rArr; bsp_8080_lcd_set_window &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init (via Veneer)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>bsp_8080_lcd_scan_dir</STRONG> (Thumb, 394 bytes, Stack size 16 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_scan_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = bsp_8080_lcd_scan_dir &rArr; bsp_8080_lcd_write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_write_reg
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_regno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[118]"></a>bsp_8080_lcd_set_cursor</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_set_cursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_regno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_draw_point
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_clear
</UL>

<P><STRONG><a name="[11a]"></a>bsp_8080_lcd_set_window</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_set_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = bsp_8080_lcd_set_window &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_regno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_color_fill
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_fill
</UL>

<P><STRONG><a name="[12a]"></a>bsp_8080_lcd_show_char</STRONG> (Thumb, 292 bytes, Stack size 44 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_show_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf
</UL>

<P><STRONG><a name="[cc]"></a>bsp_8080_lcd_show_log</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_show_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = bsp_8080_lcd_show_log &rArr; bsp_8080_lcd_color_fill &rArr; driver_dma_mem_to_exmclcd_start &rArr; driver_dma_flag_wait_timeout &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init (via Veneer)
</UL>

<P><STRONG><a name="[12c]"></a>bsp_8080_lcd_wr_data</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_wr_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_8080_lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9488_reginit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9341_reginit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_window
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_cursor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_scan_dir
</UL>

<P><STRONG><a name="[11f]"></a>bsp_8080_lcd_wr_regno</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_wr_regno))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_8080_lcd_wr_regno
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9488_reginit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_ex_ili9341_reginit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_window
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_set_cursor
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_scan_dir
</UL>

<P><STRONG><a name="[12b]"></a>bsp_8080_lcd_write_reg</STRONG> (Thumb, 22 bytes, Stack size 12 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bsp_8080_lcd_write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_scan_dir
</UL>

<P><STRONG><a name="[12d]"></a>bsp_dci_byte_read</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, bsp_ov7670.o(i.bsp_dci_byte_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bsp_dci_byte_read &rArr; bsp_software_i2c_read_data &rArr; bsp_software_i2c_read_byte &rArr; bsp_software_i2c_nack &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_write_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_data
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_id_read
</UL>

<P><STRONG><a name="[130]"></a>bsp_dci_byte_write</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_ov7670.o(i.bsp_dci_byte_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = bsp_dci_byte_write &rArr; bsp_software_i2c_mem_write_byte &rArr; bsp_software_i2c_wait_ack &rArr; bsp_software_i2c_stop &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_mem_write_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
</UL>

<P><STRONG><a name="[132]"></a>bsp_led_group_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_led_group_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsp_led_group_init &rArr; bsp_led_init &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[133]"></a>bsp_led_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_led_init &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_group_init
</UL>

<P><STRONG><a name="[134]"></a>bsp_led_off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_led_off &rArr; driver_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>bsp_led_on</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_led_on &rArr; driver_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[137]"></a>bsp_led_toggle</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_led.o(i.bsp_led_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = bsp_led_toggle &rArr; driver_gpio_pin_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_toggle
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[139]"></a>bsp_mco_init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, bsp_ov7670.o(i.bsp_mco_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_mco_init &rArr; driver_timer_channel_init &rArr; driver_timer_base_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_on
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_duty_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
</UL>

<P><STRONG><a name="[13a]"></a>bsp_ov7670_id_read</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, bsp_ov7670.o(i.bsp_ov7670_id_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsp_ov7670_id_read &rArr; bsp_dci_byte_read &rArr; bsp_software_i2c_read_data &rArr; bsp_software_i2c_read_byte &rArr; bsp_software_i2c_nack &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dci_byte_read
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>bsp_ov7670_init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, bsp_ov7670.o(i.bsp_ov7670_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = bsp_ov7670_init &rArr; bsp_dci_byte_write &rArr; bsp_software_i2c_mem_write_byte &rArr; bsp_software_i2c_wait_ack &rArr; bsp_software_i2c_stop &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_enable (via Veneer)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_capture_enable (via Veneer)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_reset
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_sccb_config
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mco_init
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dci_byte_write
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>bsp_sccb_config</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, bsp_ov7670.o(i.bsp_sccb_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = bsp_sccb_config &rArr; bsp_software_i2c_init &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
</UL>

<P><STRONG><a name="[143]"></a>bsp_software_i2c_ack</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.bsp_software_i2c_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_software_i2c_ack &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_PP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_L
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
</UL>

<P><STRONG><a name="[144]"></a>bsp_software_i2c_delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.bsp_software_i2c_delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_nack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_ack
</UL>

<P><STRONG><a name="[142]"></a>bsp_software_i2c_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.bsp_software_i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = bsp_software_i2c_init &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_sccb_config
</UL>

<P><STRONG><a name="[131]"></a>bsp_software_i2c_mem_write_byte</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_software_i2c.o(i.bsp_software_i2c_mem_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_software_i2c_mem_write_byte &rArr; bsp_software_i2c_wait_ack &rArr; bsp_software_i2c_stop &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dci_byte_write
</UL>

<P><STRONG><a name="[149]"></a>bsp_software_i2c_nack</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.bsp_software_i2c_nack))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_software_i2c_nack &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_PP
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_H
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
</UL>

<P><STRONG><a name="[14a]"></a>bsp_software_i2c_read_byte</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, bsp_software_i2c.o(i.bsp_software_i2c_read_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = bsp_software_i2c_read_byte &rArr; bsp_software_i2c_nack &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_nack
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_ack
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_data
</UL>

<P><STRONG><a name="[12f]"></a>bsp_software_i2c_read_data</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.bsp_software_i2c_read_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = bsp_software_i2c_read_data &rArr; bsp_software_i2c_read_byte &rArr; bsp_software_i2c_nack &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dci_byte_read
</UL>

<P><STRONG><a name="[146]"></a>bsp_software_i2c_send_byte</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.bsp_software_i2c_send_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = bsp_software_i2c_send_byte &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_PP
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_OD
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_L
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_H
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_write_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_mem_write_byte
</UL>

<P><STRONG><a name="[145]"></a>bsp_software_i2c_start</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.bsp_software_i2c_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_software_i2c_start &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_PP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_L
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_H
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_write_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_mem_write_byte
</UL>

<P><STRONG><a name="[148]"></a>bsp_software_i2c_stop</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.bsp_software_i2c_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = bsp_software_i2c_stop &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_PP
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_L
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_H
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_write_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_mem_write_byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
</UL>

<P><STRONG><a name="[147]"></a>bsp_software_i2c_wait_ack</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.bsp_software_i2c_wait_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = bsp_software_i2c_wait_ack &rArr; bsp_software_i2c_stop &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_H
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_write_byte
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_data
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_mem_write_byte
</UL>

<P><STRONG><a name="[12e]"></a>bsp_software_i2c_write_byte</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.bsp_software_i2c_write_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = bsp_software_i2c_write_byte &rArr; bsp_software_i2c_wait_ack &rArr; bsp_software_i2c_stop &rArr; bsp_software_i2c_delay &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_dci_byte_read
</UL>

<P><STRONG><a name="[14b]"></a>bsp_uart_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_uart.o(i.bsp_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = bsp_uart_init &rArr; driver_uart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14d]"></a>dci_check_ready</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, bsp_ov7670.o(i.dci_check_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dci_check_ready &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>dci_config</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, bsp_ov7670.o(i.dci_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = dci_config &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_init (via Veneer)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_deinit (via Veneer)
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set (via Veneer)
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
</UL>

<P><STRONG><a name="[152]"></a>dci_restart</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, bsp_ov7670.o(i.dci_restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dci_restart &rArr; driver_dma_start &rArr; dma_memory_address_config
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_capture_enable (via Veneer)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15b]"></a>dma_channel_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_channel_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
</UL>

<P><STRONG><a name="[165]"></a>dma_channel_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_channel_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_channel_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
</UL>

<P><STRONG><a name="[158]"></a>dma_circulation_disable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_circulation_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_circulation_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>

<P><STRONG><a name="[159]"></a>dma_circulation_enable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_circulation_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_circulation_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>

<P><STRONG><a name="[155]"></a>dma_deinit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_deinit
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>

<P><STRONG><a name="[14f]"></a>dma_flag_clear</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_check_ready
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_flag_wait_timeout
</UL>

<P><STRONG><a name="[14e]"></a>dma_flag_get</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_check_ready
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_flag_wait_timeout
</UL>

<P><STRONG><a name="[162]"></a>dma_memory_address_config</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_memory_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_memory_address_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
</UL>

<P><STRONG><a name="[160]"></a>dma_memory_address_generation_config</STRONG> (Thumb, 64 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_memory_address_generation_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_memory_address_generation_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[15d]"></a>dma_memory_width_config</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_memory_width_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_memory_width_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[163]"></a>dma_periph_address_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_periph_address_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_periph_address_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[15e]"></a>dma_periph_width_config</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_periph_width_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_periph_width_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[15f]"></a>dma_peripheral_address_generation_config</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_peripheral_address_generation_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_peripheral_address_generation_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[161]"></a>dma_priority_config</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_priority_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_priority_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[157]"></a>dma_single_data_mode_init</STRONG> (Thumb, 484 bytes, Stack size 16 bytes, gd32h7xx_dma.o(i.dma_single_data_mode_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dma_single_data_mode_init
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>

<P><STRONG><a name="[156]"></a>dma_single_data_para_struct_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32h7xx_dma.o(i.dma_single_data_para_struct_init))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>

<P><STRONG><a name="[15c]"></a>dma_transfer_direction_config</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32h7xx_dma.o(i.dma_transfer_direction_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dma_transfer_direction_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[164]"></a>dma_transfer_number_config</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32h7xx_dma.o(i.dma_transfer_number_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dma_transfer_number_config
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_start
</UL>

<P><STRONG><a name="[150]"></a>dma_transfer_number_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_dma.o(i.dma_transfer_number_get))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_check_ready
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[fc]"></a>driver_cmp_int_handler</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, driver_cmp.o(i.driver_cmp_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = driver_cmp_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_get
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMP0_1_IRQHandler
</UL>

<P><STRONG><a name="[13e]"></a>driver_dma_com_init</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, driver_dma.o(i.driver_dma_com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = driver_dma_com_init &rArr; dma_single_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_para_struct_init
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_single_data_mode_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_deinit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[15a]"></a>driver_dma_flag_wait_timeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, driver_dma.o(i.driver_dma_flag_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = driver_dma_flag_wait_timeout &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_get
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_to_exmclcd_start
</UL>

<P><STRONG><a name="[126]"></a>driver_dma_mem_init</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, driver_dma.o(i.driver_dma_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = driver_dma_mem_init &rArr; driver_dma_com_init &rArr; dma_single_data_mode_init
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_port_init
</UL>

<P><STRONG><a name="[11b]"></a>driver_dma_mem_to_exmclcd_start</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, driver_dma.o(i.driver_dma_mem_to_exmclcd_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = driver_dma_mem_to_exmclcd_start &rArr; driver_dma_flag_wait_timeout &rArr; dma_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_direction_config
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_priority_config
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_peripheral_address_generation_config
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_width_config
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_periph_address_config
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_width_config
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_generation_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_circulation_disable
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_flag_wait_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_color_fill
</UL>

<P><STRONG><a name="[13f]"></a>driver_dma_start</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, driver_dma.o(i.driver_dma_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = driver_dma_start &rArr; dma_memory_address_config
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_config
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_memory_address_config
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_flag_clear
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_enable
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_channel_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_restart
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
</UL>

<P><STRONG><a name="[107]"></a>driver_gpio_general_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, driver_gpio.o(i.driver_gpio_general_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set (via Veneer)
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write (via Veneer)
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set (via Veneer)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_interrupt_flag_clear
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable (via Veneer)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;syscfg_exti_line_config (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_port_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_PP
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT_OD
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[105]"></a>driver_gpio_pin_get</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, driver_gpio.o(i.driver_gpio_pin_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = driver_gpio_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;READ_SDA
</UL>

<P><STRONG><a name="[101]"></a>driver_gpio_pin_reset</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, driver_gpio.o(i.driver_gpio_pin_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = driver_gpio_pin_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_L
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_L
</UL>

<P><STRONG><a name="[ff]"></a>driver_gpio_pin_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, driver_gpio.o(i.driver_gpio_pin_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = driver_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SDA_H
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_SCL_H
</UL>

<P><STRONG><a name="[138]"></a>driver_gpio_pin_toggle</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, driver_gpio.o(i.driver_gpio_pin_toggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_gpio_pin_toggle
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get (via Veneer)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_toggle
</UL>

<P><STRONG><a name="[135]"></a>driver_gpio_pin_write</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, driver_gpio.o(i.driver_gpio_pin_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_gpio_pin_write
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_on
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_off
</UL>

<P><STRONG><a name="[125]"></a>driver_timer_channel_init</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, driver_timer.o(i.driver_timer_channel_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = driver_timer_channel_init &rArr; driver_timer_base_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_slave_mode_select
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_primary_output_config
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_master_slave_mode_config
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_trigger_source_select
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_pwm_capture_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_struct_para_init
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_shadow_config
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_mode_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_config
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_struct_para_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_base_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_port_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mco_init
</UL>

<P><STRONG><a name="[115]"></a>driver_timer_pwm_duty_set</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, driver_timer.o(i.driver_timer_pwm_duty_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = driver_timer_pwm_duty_set
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_event_enable
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_update_event_disable
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_pulse_value_config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_backlight_on
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_backlight_duty_set
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mco_init
</UL>

<P><STRONG><a name="[117]"></a>driver_timer_pwm_on</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, driver_timer.o(i.driver_timer_pwm_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = driver_timer_pwm_on
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_output_state_config
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_backlight_on
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_port_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_mco_init
</UL>

<P><STRONG><a name="[10a]"></a>driver_timer_updata_int_handler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, driver_timer.o(i.driver_timer_updata_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = driver_timer_updata_int_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER5_DAC_UDR_IRQHandler
</UL>

<P><STRONG><a name="[183]"></a>driver_uart_flag_wait_timeout</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, driver_uart.o(i.driver_uart_flag_wait_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = driver_uart_flag_wait_timeout &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_transmit_byte
</UL>

<P><STRONG><a name="[14c]"></a>driver_uart_init</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, driver_uart.o(i.driver_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = driver_uart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable (via Veneer)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_word_length_set
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_parity_config
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
</UL>

<P><STRONG><a name="[10b]"></a>driver_uart_int_handler</STRONG> (Thumb, 382 bytes, Stack size 16 bytes, driver_uart.o(i.driver_uart_int_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = driver_uart_int_handler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dma_transfer_number_get
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_clear
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[193]"></a>driver_uart_transmit_byte</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, driver_uart.o(i.driver_uart_transmit_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = driver_uart_transmit_byte &rArr; driver_uart_flag_wait_timeout &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_flag_wait_timeout
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[fd]"></a>dvire_gpio_exti_handle</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, driver_gpio.o(i.dvire_gpio_exti_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = dvire_gpio_exti_handle
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_get
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[fb]"></a>error_reset</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, gd32h7xx_interrupt.o(i.error_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = error_reset &rArr; bsp_8080_lcd_printf &rArr; bsp_8080_lcd_show_char &rArr; bsp_8080_lcd_draw_point &rArr; bsp_8080_lcd_set_cursor &rArr; bsp_8080_lcd_wr_regno
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>

<P><STRONG><a name="[195]"></a>exti_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32h7xx_exti.o(i.exti_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvire_gpio_exti_handle
</UL>

<P><STRONG><a name="[194]"></a>exti_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32h7xx_exti.o(i.exti_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dvire_gpio_exti_handle
</UL>

<P><STRONG><a name="[168]"></a>exti_init</STRONG> (Thumb, 408 bytes, Stack size 12 bytes, gd32h7xx_exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exti_init
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>

<P><STRONG><a name="[154]"></a>exti_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, gd32h7xx_exti.o(i.exti_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_cmp_int_handler
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>

<P><STRONG><a name="[153]"></a>exti_interrupt_flag_get</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32h7xx_exti.o(i.exti_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_cmp_int_handler
</UL>

<P><STRONG><a name="[b0]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, bsp_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; driver_uart_transmit_byte &rArr; driver_uart_flag_wait_timeout &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_transmit_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[122]"></a>lcd_ex_ili9341_reginit</STRONG> (Thumb, 556 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.lcd_ex_ili9341_reginit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_ex_ili9341_reginit &rArr; delay_ms &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_regno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[121]"></a>lcd_ex_ili9488_reginit</STRONG> (Thumb, 502 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.lcd_ex_ili9488_reginit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = lcd_ex_ili9488_reginit &rArr; delay_ms &rArr; delay_us &rArr; delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_regno
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_wr_data
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[ad]"></a>main</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = main &rArr; driver_init &rArr; bsp_8080_lcd_init &rArr; bsp_8080_lcd_port_init &rArr; driver_exmc_lcd_init &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init (via Veneer)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_restart
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_check_ready
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_uart_init
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_id_read
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_toggle
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_on
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_off
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_led_group_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_color_fill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[16e]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_auto_reload_shadow_enable))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_base_init
</UL>

<P><STRONG><a name="[197]"></a>timer_channel_input_capture_prescaler_config</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_channel_input_capture_prescaler_config))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_pwm_capture_config
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_input_capture_config
</UL>

<P><STRONG><a name="[176]"></a>timer_channel_input_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_channel_input_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[171]"></a>timer_channel_output_config</STRONG> (Thumb, 640 bytes, Stack size 8 bytes, gd32h7xx_timer.o(i.timer_channel_output_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[173]"></a>timer_channel_output_mode_config</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, gd32h7xx_timer.o(i.timer_channel_output_mode_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_channel_output_mode_config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[172]"></a>timer_channel_output_pulse_value_config</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_channel_output_pulse_value_config))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_duty_set
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[174]"></a>timer_channel_output_shadow_config</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_channel_output_shadow_config))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[181]"></a>timer_channel_output_state_config</STRONG> (Thumb, 182 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_channel_output_state_config))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_on
</UL>

<P><STRONG><a name="[170]"></a>timer_channel_output_struct_para_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_channel_output_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[16f]"></a>timer_deinit</STRONG> (Thumb, 598 bytes, Stack size 8 bytes, gd32h7xx_timer.o(i.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[17e]"></a>timer_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_enable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[16d]"></a>timer_init</STRONG> (Thumb, 278 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_init))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_base_init
</UL>

<P><STRONG><a name="[177]"></a>timer_input_capture_config</STRONG> (Thumb, 916 bytes, Stack size 16 bytes, gd32h7xx_timer.o(i.timer_input_capture_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_input_capture_config
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[17a]"></a>timer_input_pwm_capture_config</STRONG> (Thumb, 356 bytes, Stack size 24 bytes, gd32h7xx_timer.o(i.timer_input_pwm_capture_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = timer_input_pwm_capture_config
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_channel_input_capture_prescaler_config
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[17b]"></a>timer_input_trigger_source_select</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, gd32h7xx_timer.o(i.timer_input_trigger_source_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = timer_input_trigger_source_select
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[179]"></a>timer_interrupt_enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_interrupt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[178]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_interrupt_flag_clear))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_updata_int_handler
</UL>

<P><STRONG><a name="[182]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_interrupt_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_updata_int_handler
</UL>

<P><STRONG><a name="[17d]"></a>timer_master_slave_mode_config</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_master_slave_mode_config))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[175]"></a>timer_primary_output_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_primary_output_config))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[17c]"></a>timer_slave_mode_select</STRONG> (Thumb, 1174 bytes, Stack size 36 bytes, gd32h7xx_timer.o(i.timer_slave_mode_select))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = timer_slave_mode_select
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[17f]"></a>timer_update_event_disable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_update_event_disable))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_duty_set
</UL>

<P><STRONG><a name="[180]"></a>timer_update_event_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_timer.o(i.timer_update_event_enable))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_duty_set
</UL>

<P><STRONG><a name="[187]"></a>usart_baudrate_set</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, gd32h7xx_usart.o(i.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[18e]"></a>usart_data_receive</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_data_receive))
<BR><BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[190]"></a>usart_data_transmit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_data_transmit))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_transmit_byte
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[185]"></a>usart_deinit</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, gd32h7xx_usart.o(i.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable (via Veneer)
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[18c]"></a>usart_enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_enable))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[192]"></a>usart_flag_clear</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, gd32h7xx_usart.o(i.usart_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[184]"></a>usart_flag_get</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32h7xx_usart.o(i.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_flag_wait_timeout
</UL>

<P><STRONG><a name="[191]"></a>usart_interrupt_disable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32h7xx_usart.o(i.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[186]"></a>usart_interrupt_enable</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gd32h7xx_usart.o(i.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[18f]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, gd32h7xx_usart.o(i.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[18d]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, gd32h7xx_usart.o(i.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_int_handler
</UL>

<P><STRONG><a name="[18b]"></a>usart_parity_config</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_parity_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[188]"></a>usart_receive_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_receive_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[189]"></a>usart_transmit_config</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_transmit_config))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[18a]"></a>usart_word_length_set</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, gd32h7xx_usart.o(i.usart_word_length_set))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init
</UL>

<P><STRONG><a name="[af]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(.text)
</UL>
<P><STRONG><a name="[1a3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[b2]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[b4]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1a4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1a5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1a6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1a7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1a8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>ADC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>AVD_LVD_OVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>CAN0_Busoff_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>CAN0_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>CAN0_FastError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>CAN0_Message_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>CAN0_REC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CAN0_TEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>CAN0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[90]"></a>CAN1_Busoff_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>CAN1_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[92]"></a>CAN1_FastError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>CAN1_Message_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[94]"></a>CAN1_REC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[93]"></a>CAN1_TEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>CAN1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[97]"></a>CAN2_Busoff_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>CAN2_Error_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[99]"></a>CAN2_FastError_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[96]"></a>CAN2_Message_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9b]"></a>CAN2_REC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9a]"></a>CAN2_TEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>CAN2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA0_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA0_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA0_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA0_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA0_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA0_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA0_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>DMA0_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMAMUX_OVR_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>EFUSE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ENET0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ENET0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>ENET1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>ENET1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>EXTI10_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI5_9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>FAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>HAU_TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>HPDF_INT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>HPDF_INT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>HPDF_INT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>HPDF_INT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>HWSEM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>I2C0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>I2C1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[9f]"></a>I2C2_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a0]"></a>I2C3_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>IPA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a1]"></a>LPDTS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>LPDTS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>MDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>MDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>OSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>RAMECCMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>RSPDIF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>RTDEC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>RTDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>SAI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SDIO0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SDIO1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_STAMP_LXTAL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>TIMER0_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>TIMER0_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TIMER0_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>TIMER0_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a5]"></a>TIMER1_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>TIMER22_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>TIMER22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>TIMER23_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>TIMER23_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a6]"></a>TIMER2_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TIMER30_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>TIMER30_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[ac]"></a>TIMER31_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIMER31_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a7]"></a>TIMER3_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>TIMER40_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>TIMER41_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>TIMER42_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIMER43_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIMER44_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a8]"></a>TIMER4_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIMER4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>TIMER50_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>TIMER51_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIMER7_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIMER7_Channel_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a4]"></a>TIMER7_DEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIMER7_TRG_CMT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIMER7_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>TLI_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TLI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>USART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>USBHS0_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>USBHS0_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>USBHS0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>USBHS0_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>USBHS1_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>USBHS1_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USBHS1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>USBHS1_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32h7xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(RESET)
</UL>
<P><STRONG><a name="[b3]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a9]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1aa]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>cache_enable</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>

<P><STRONG><a name="[1ac]"></a>cache_disable</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, driver_public.o(FLASH_AREA), UNUSED)

<P><STRONG><a name="[b7]"></a>delay_init</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us (via Veneer)
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_sysclk (via Veneer)
</UL>

<P><STRONG><a name="[c6]"></a>driver_system_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = driver_system_config &rArr; ob_ram_config &rArr; ob_tcm_shared_ram_config &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c7]"></a>driver_init</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = driver_init &rArr; bsp_8080_lcd_init &rArr; bsp_8080_lcd_port_init &rArr; driver_exmc_lcd_init &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_printf_init (via Veneer)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init (via Veneer)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_show_log (via Veneer)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_clear (via Veneer)
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_system_config
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_mpu_config
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cache_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[ce]"></a>mpu_config</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mpu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_struct_para_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
</UL>

<P><STRONG><a name="[b8]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 212 bytes, Stack size 20 bytes, system_gd32h7xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_base_init (via Veneer)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[ae]"></a>SystemInit</STRONG> (Thumb, 314 bytes, Stack size 8 bytes, system_gd32h7xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = SystemInit &rArr; driver_exmc_sdram_init &rArr; driver_exmc_sdram_gpio_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pmu_smps_ldo_supply_config
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_system_config
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32h7xx.o(.text)
</UL>
<P><STRONG><a name="[1ad]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1ae]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1af]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[141]"></a>dci_capture_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32h7xx_dci.o(i.dci_capture_enable))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_restart (via Veneer)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init (via Veneer)
</UL>

<P><STRONG><a name="[d2]"></a>dci_deinit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32h7xx_dci.o(i.dci_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dci_deinit
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config (via Veneer)
</UL>

<P><STRONG><a name="[140]"></a>dci_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32h7xx_dci.o(i.dci_enable))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_ov7670_init (via Veneer)
</UL>

<P><STRONG><a name="[151]"></a>dci_init</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, gd32h7xx_dci.o(i.dci_init))
<BR><BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config (via Veneer)
</UL>

<P><STRONG><a name="[da]"></a>driver_exmc_lcd_init</STRONG> (Thumb, 304 bytes, Stack size 168 bytes, driver_exmc.o(i.driver_exmc_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = driver_exmc_lcd_init &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_struct_para_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_norsram_enable
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_struct_para_init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_16bit_gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_port_init (via Veneer)
</UL>

<P><STRONG><a name="[d1]"></a>driver_exmc_sdram_init</STRONG> (Thumb, 358 bytes, Stack size 112 bytes, driver_exmc.o(i.driver_exmc_sdram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = driver_exmc_sdram_init &rArr; driver_exmc_sdram_gpio_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_struct_para_init
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_refresh_count_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_sdram_command_config
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exmc_flag_get
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_gpio_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e2]"></a>exmc_flag_get</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, gd32h7xx_exmc.o(i.exmc_flag_get))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[de]"></a>exmc_norsram_enable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gd32h7xx_exmc.o(i.exmc_norsram_enable))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
</UL>

<P><STRONG><a name="[dd]"></a>exmc_norsram_init</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, gd32h7xx_exmc.o(i.exmc_norsram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = exmc_norsram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
</UL>

<P><STRONG><a name="[db]"></a>exmc_norsram_struct_para_init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, gd32h7xx_exmc.o(i.exmc_norsram_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
</UL>

<P><STRONG><a name="[e3]"></a>exmc_sdram_command_config</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32h7xx_exmc.o(i.exmc_sdram_command_config))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[e1]"></a>exmc_sdram_init</STRONG> (Thumb, 268 bytes, Stack size 16 bytes, gd32h7xx_exmc.o(i.exmc_sdram_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exmc_sdram_init
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[e5]"></a>exmc_sdram_refresh_count_set</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, gd32h7xx_exmc.o(i.exmc_sdram_refresh_count_set))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[e0]"></a>exmc_sdram_struct_para_init</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, gd32h7xx_exmc.o(i.exmc_sdram_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[d7]"></a>gpio_af_set</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, gd32h7xx_gpio.o(i.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_gpio_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_16bit_gpio_init
</UL>

<P><STRONG><a name="[16a]"></a>gpio_bit_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32h7xx_gpio.o(i.gpio_bit_reset))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_reset (via Veneer)
</UL>

<P><STRONG><a name="[16b]"></a>gpio_bit_set</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32h7xx_gpio.o(i.gpio_bit_set))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_set (via Veneer)
</UL>

<P><STRONG><a name="[166]"></a>gpio_bit_write</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gd32h7xx_gpio.o(i.gpio_bit_write))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_write (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_toggle (via Veneer)
</UL>

<P><STRONG><a name="[169]"></a>gpio_input_bit_get</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_gpio.o(i.gpio_input_bit_get))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_get (via Veneer)
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_toggle (via Veneer)
</UL>

<P><STRONG><a name="[d8]"></a>gpio_mode_set</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, gd32h7xx_gpio.o(i.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_gpio_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_16bit_gpio_init
</UL>

<P><STRONG><a name="[d9]"></a>gpio_output_options_set</STRONG> (Thumb, 66 bytes, Stack size 20 bytes, gd32h7xx_gpio.o(i.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_gpio_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_16bit_gpio_init
</UL>

<P><STRONG><a name="[bb]"></a>mpu_region_config</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, gd32h7xx_misc.o(i.mpu_region_config))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_mpu_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_config
</UL>

<P><STRONG><a name="[bc]"></a>mpu_region_enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32h7xx_misc.o(i.mpu_region_enable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_mpu_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_config
</UL>

<P><STRONG><a name="[ba]"></a>mpu_region_struct_para_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, gd32h7xx_misc.o(i.mpu_region_struct_para_init))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_mpu_config
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_config
</UL>

<P><STRONG><a name="[c8]"></a>nvic_vector_table_set</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32h7xx_misc.o(i.nvic_vector_table_set))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[c5]"></a>ob_lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, gd32h7xx_fmc.o(i.ob_lock))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[c4]"></a>ob_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32h7xx_fmc.o(i.ob_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ob_start &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[c3]"></a>ob_tcm_ecc_config</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, gd32h7xx_fmc.o(i.ob_tcm_ecc_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ob_tcm_ecc_config &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[bf]"></a>ob_tcm_ecc_get</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, gd32h7xx_fmc.o(i.ob_tcm_ecc_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ob_tcm_ecc_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[c2]"></a>ob_tcm_shared_ram_config</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, gd32h7xx_fmc.o(i.ob_tcm_shared_ram_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ob_tcm_shared_ram_config &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[c0]"></a>ob_tcm_shared_ram_size_get</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, gd32h7xx_fmc.o(i.ob_tcm_shared_ram_size_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ob_tcm_shared_ram_size_get
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[c1]"></a>ob_unlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, gd32h7xx_fmc.o(i.ob_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_ram_config
</UL>

<P><STRONG><a name="[cf]"></a>pmu_smps_ldo_supply_config</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, gd32h7xx_pmu.o(i.pmu_smps_ldo_supply_config))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[dc]"></a>rcu_clock_freq_get</STRONG> (Thumb, 2126 bytes, Stack size 224 bytes, gd32h7xx_rcu.o(i.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_irc64mdiv_freq_get
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_pll_clock_freq_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
</UL>

<P><STRONG><a name="[e8]"></a>rcu_irc64mdiv_freq_get</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, gd32h7xx_rcu.o(i.rcu_irc64mdiv_freq_get))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>

<P><STRONG><a name="[d6]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32h7xx_rcu.o(i.rcu_periph_clock_enable))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init (via Veneer)
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init (via Veneer)
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_com_init (via Veneer)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_config (via Veneer)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_uart_init (via Veneer)
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_gpio_init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_16bit_gpio_init
</UL>

<P><STRONG><a name="[d4]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32h7xx_rcu.o(i.rcu_periph_reset_disable))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_deinit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit (via Veneer)
</UL>

<P><STRONG><a name="[d3]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, gd32h7xx_rcu.o(i.rcu_periph_reset_enable))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dci_deinit
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit (via Veneer)
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit (via Veneer)
</UL>

<P><STRONG><a name="[167]"></a>syscfg_exti_line_config</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, gd32h7xx_syscfg.o(i.syscfg_exti_line_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = syscfg_exti_line_config
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init (via Veneer)
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e6]"></a>fmc_ready_wait</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, gd32h7xx_fmc.o(i.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_tcm_shared_ram_config
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_tcm_ecc_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_start
</UL>

<P><STRONG><a name="[e7]"></a>fmc_state_get</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, gd32h7xx_fmc.o(i.fmc_state_get))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[e9]"></a>rcu_pll_clock_freq_cal</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, gd32h7xx_rcu.o(i.rcu_pll_clock_freq_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_pll_clock_freq_cal
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>

<P><STRONG><a name="[ea]"></a>system_clock_600m_hxtal</STRONG> (Thumb, 294 bytes, Stack size 0 bytes, system_gd32h7xx.o(i.system_clock_600m_hxtal))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[d0]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32h7xx.o(i.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = system_clock_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_600m_hxtal
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[11e]"></a>bsp_8080_lcd_port_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = bsp_8080_lcd_port_init &rArr; driver_exmc_lcd_init &rArr; rcu_clock_freq_get &rArr; rcu_pll_clock_freq_cal
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_pwm_on
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init (via Veneer)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_dma_mem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[120]"></a>bsp_8080_lcd_read_data</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_8080_lcd.o(i.bsp_8080_lcd_read_data))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_8080_lcd_init
</UL>

<P><STRONG><a name="[fe]"></a>IIC_SCL_H</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.IIC_SCL_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_SCL_H &rArr; driver_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_nack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_ack
</UL>

<P><STRONG><a name="[100]"></a>IIC_SCL_L</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.IIC_SCL_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_SCL_L &rArr; driver_gpio_pin_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_nack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_ack
</UL>

<P><STRONG><a name="[102]"></a>IIC_SDA_H</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.IIC_SDA_H))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_SDA_H &rArr; driver_gpio_pin_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_set
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_nack
</UL>

<P><STRONG><a name="[103]"></a>IIC_SDA_L</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.IIC_SDA_L))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IIC_SDA_L &rArr; driver_gpio_pin_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_ack
</UL>

<P><STRONG><a name="[104]"></a>READ_SDA</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.READ_SDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = READ_SDA &rArr; driver_gpio_pin_get
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_pin_get
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_wait_ack
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
</UL>

<P><STRONG><a name="[106]"></a>SDA_IN</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_software_i2c.o(i.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SDA_IN &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_read_byte
</UL>

<P><STRONG><a name="[108]"></a>SDA_OUT_OD</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.SDA_OUT_OD))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDA_OUT_OD &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
</UL>

<P><STRONG><a name="[109]"></a>SDA_OUT_PP</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, bsp_software_i2c.o(i.SDA_OUT_PP))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SDA_OUT_PP &rArr; driver_gpio_general_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_gpio_general_init
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_stop
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_start
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_send_byte
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_nack
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_software_i2c_ack
</UL>

<P><STRONG><a name="[e4]"></a>_delay</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, driver_exmc.o(i._delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _delay
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[d5]"></a>driver_exmc_lcd_16bit_gpio_init</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, driver_exmc.o(i.driver_exmc_lcd_16bit_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = driver_exmc_lcd_16bit_gpio_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_lcd_init
</UL>

<P><STRONG><a name="[df]"></a>driver_exmc_sdram_gpio_init</STRONG> (Thumb, 296 bytes, Stack size 8 bytes, driver_exmc.o(i.driver_exmc_sdram_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = driver_exmc_sdram_gpio_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_exmc_sdram_init
</UL>

<P><STRONG><a name="[16c]"></a>driver_timer_base_init</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, driver_timer.o(i.driver_timer_base_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = driver_timer_base_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate (via Veneer)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_timer_channel_init
</UL>

<P><STRONG><a name="[b5]"></a>systick_config</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = systick_config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>

<P><STRONG><a name="[b9]"></a>default_mpu_config</STRONG> (Thumb, 488 bytes, Stack size 24 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = default_mpu_config
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_struct_para_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_enable
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_region_config
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_Enable (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_init
</UL>

<P><STRONG><a name="[be]"></a>ob_ram_config</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, driver_public.o(FLASH_AREA))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ob_ram_config &rArr; ob_tcm_shared_ram_config &rArr; fmc_ready_wait
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_unlock
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_tcm_shared_ram_size_get
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_tcm_shared_ram_config
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_tcm_ecc_get
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_tcm_ecc_config
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_start
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ob_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_system_config
</UL>

<P><STRONG><a name="[bd]"></a>ARM_MPU_Enable</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, driver_public.o(i.ARM_MPU_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_mpu_config (via Veneer)
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_config (via Veneer)
</UL>

<P><STRONG><a name="[b6]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, driver_public.o(i.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systick_config (via Veneer)
</UL>

<P><STRONG><a name="[10f]"></a>_fp_digits</STRONG> (Thumb, 334 bytes, Stack size 56 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[10d]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[112]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[111]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b1]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
